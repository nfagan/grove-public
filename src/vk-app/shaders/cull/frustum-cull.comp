#version 450

#if 0

#define LOCAL_SIZE_X (32)
#define LOCAL_SIZE_Y (1)

#else

#ifndef LOCAL_SIZE_X
#error "Expected LOCAL_SIZE_X define"
#endif

#ifndef LOCAL_SIZE_Y
#error "Expected LOCAL_SIZE_Y define"
#endif

#endif

#pragma include "cull/frustum-cull-types.glsl"

layout (local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y, local_size_z = 1) in;

layout (set = 0, binding = 0, std430) readonly buffer FrustumCullInstances {
  FrustumCullInstance instances[];
};

layout (set = 0, binding = 1, std430) writeonly buffer FrustumCullResults {
  FrustumCullResult result[];
};

layout (push_constant, std140) uniform PushConstants {
  uvec4 num_instances_unused;
  vec4 near;
  vec4 far;
  vec4 left;
  vec4 right;
  vec4 top;
  vec4 bottom;
};

uint aabb_plane_side_positive_or_zero(vec4 p, in vec3 vs[8]) {
  vec3 n = p.xyz;
  uint any_pos = 0;

  for (int i = 0; i < 8; i++) {
    float sdf = dot(n, vs[i]) + p.w;
    any_pos |= uint(sdf >= 0.0f);
  }

  return any_pos;
}

void main() {
  uint tile_size = gl_WorkGroupSize.x * gl_WorkGroupSize.y;
  uint invoke_index = gl_LocalInvocationIndex + tile_size * (gl_WorkGroupID.x + gl_WorkGroupID.y * gl_NumWorkGroups.x);
  if (invoke_index >= num_instances_unused.x) {
    return;
  }

  FrustumCullInstance inst = instances[invoke_index];

  vec3 p0 = inst.aabb_p0.xyz;
  vec3 p1 = inst.aabb_p1.xyz;

  vec3 vs[8];
  vs[0] = vec3(p0.x, p0.y, p0.z);
  vs[1] = vec3(p1.x, p0.y, p0.z);
  vs[2] = vec3(p1.x, p1.y, p0.z);
  vs[3] = vec3(p0.x, p1.y, p0.z);
  vs[4] = vec3(p0.x, p0.y, p1.z);
  vs[5] = vec3(p1.x, p0.y, p1.z);
  vs[6] = vec3(p1.x, p1.y, p1.z);
  vs[7] = vec3(p0.x, p1.y, p1.z);

  uint res = 1;
  res &= aabb_plane_side_positive_or_zero(near, vs);
  res &= aabb_plane_side_positive_or_zero(far, vs);
  res &= aabb_plane_side_positive_or_zero(left, vs);
  res &= aabb_plane_side_positive_or_zero(right, vs);
  res &= aabb_plane_side_positive_or_zero(top, vs);
  res &= aabb_plane_side_positive_or_zero(bottom, vs);
  result[invoke_index].result = res;
}
